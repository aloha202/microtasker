<?php

/**
 * BaseMicrotask
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $thread_id
 * @property string $description
 * @property enum $status
 * @property integer $priority
 * @property boolean $is_blocker
 * @property boolean $is_reported
 * @property Thread $Thread
 * 
 * @method integer   getThreadId()    Returns the current record's "thread_id" value
 * @method string    getDescription() Returns the current record's "description" value
 * @method enum      getStatus()      Returns the current record's "status" value
 * @method integer   getPriority()    Returns the current record's "priority" value
 * @method boolean   getIsBlocker()   Returns the current record's "is_blocker" value
 * @method boolean   getIsReported()  Returns the current record's "is_reported" value
 * @method Thread    getThread()      Returns the current record's "Thread" value
 * @method Microtask setThreadId()    Sets the current record's "thread_id" value
 * @method Microtask setDescription() Sets the current record's "description" value
 * @method Microtask setStatus()      Sets the current record's "status" value
 * @method Microtask setPriority()    Sets the current record's "priority" value
 * @method Microtask setIsBlocker()   Sets the current record's "is_blocker" value
 * @method Microtask setIsReported()  Sets the current record's "is_reported" value
 * @method Microtask setThread()      Sets the current record's "Thread" value
 * 
 * @package    cms
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMicrotask extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('microtask');
        $this->hasColumn('thread_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'new',
              1 => 'success',
              2 => 'fail',
             ),
             'default' => 'new',
             ));
        $this->hasColumn('priority', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             'default' => 1,
             ));
        $this->hasColumn('is_blocker', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_reported', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Thread', array(
             'local' => 'thread_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $user0 = new Doctrine_Template_User();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $event0 = new Doctrine_Template_Event(array(
             'create' => 'microtask_create',
             ));
        $this->actAs($user0);
        $this->actAs($timestampable0);
        $this->actAs($event0);
    }
}